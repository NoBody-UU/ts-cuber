datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cuber         Cuber?
}

model Cuber {
  userId              String   @id @map("_id")
  user                User     @relation(fields: [userId], references: [id])
  rank                Int
  scrambles           Scrambles[]
  c2x2                Int[]
  c3x3                Int[]
  c4x4                Int[]
  c5x5                Int[]
  c6x6                Int[]
  c7x7                Int[]
  pyraminx            Int[]
  skewb               Int[]
  square1             Int[]
  megaminx            Int[]
}


model Scrambles {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  scramble    String
  time        Int
  date        DateTime
  Cuber       Cuber    @relation(fields: [userId], references: [userId])
}